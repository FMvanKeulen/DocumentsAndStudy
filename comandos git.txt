git init; cria um repositorio git vazio
git status; verifica o status dos arquivos alterados
git config (--global) user.name "nome"; seta o nome do usuario, nome da pessoa, não username/login
git config (--global) user.email "email"; seta o email do usuario
git add "nome arquivo" (sem aspas); adiciona o arquivo para ser monitorado
git commit -m "mensagem"; deixa os arquivos prontos para envio ao branch principal
git log; exibe o histórico dos commits -> /termo; busca o termo no log (b busca outro resultado, q sai da busca)
git log -NUMERO; exibe os ultimos NUMERO commits
git log --oneline (-NUMERO) (--before="DATA YYYY-MM-DD") (--after=""); traz cada commit resumido em 1 linha
git log --since="NUMERO days ago"
git checkout "code do commit" (sem aspas); retorna para o commit informado
git mv arquivo1.ext arquivo232.ext; renomeia
git rm arquivo; remove do git
git diff --staged; compara o arquivo em staged com o ultimo commitado
git commit --amend -m "mensagem"; adiciona arquivos ou corrige o ultimo commit
git restore --staged arquivo; retira o arqivo do status staged;
git checkout arquivo; retorna as alterações feitas no arquivo pro estado anterior
git reset HEAD --hard; retorna ao stage anterior antes do commit
git reset HEAD^ --hard; volta para o ultimo commit
git branch nome; cria uma nova branch
git branch -D nome; remove a branch
git merge "branch"(sem aspas); junta a branch escolhida na branch atual
git checkout -b nome; cria uma nova branch e já muda para ela
git rebase branch; parecido com o merge
git clone caminho; copia o repositorio git para outro local
git remote add origin link; adiciona um endereço de repositorio online para receber o repositorio local
git push -u origin branch; envia a branch para o repositorio online
git init --bare;
git fetch;
git pull;

Branch -> ramificação do projeto

.gitignore
nomearquivo.ext; remove o arquivo no monitoramento
**nomedapasta; remove a pasta no monitoramento